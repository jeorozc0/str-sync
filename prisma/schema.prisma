generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model matching Supabase auth.users
model User {
  id        String   @id @db.Uuid // Keep UUID for Supabase auth
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique

  // User data
  name      String?
  avatarUrl String? @map("avatar_url")

  // Relationships
  folders     Folder[]
  workouts    Workout[]
  workoutLogs WorkoutLog[]

  @@map("users")
}

// Folder model for organizing workouts
model Folder {
  id          String   @id @db.VarChar(10)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  description String?

  // Relationships
  userId   String    @map("user_id") @db.Uuid
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]

  @@map("folders")
}

// Workout model for workout templates
model Workout {
  id          String   @id @db.VarChar(10) // Changed to nanoid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  description String?
  isArchived  Boolean  @default(false) @map("is_archived")

  // Relationships
  userId    String            @map("user_id") @db.Uuid
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId  String?           @map("folder_id") @db.VarChar(10) // Changed to match Folder.id
  folder    Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  exercises WorkoutExercise[]
  logs      WorkoutLog[]

  @@map("workouts")
}

// Exercise database
model Exercise {
  id                    String  @id @db.VarChar(10) // Changed to nanoid
  name                  String
  muscleGroup           String  @map("muscle_group")
  secondaryMuscleGroups String? @map("secondary_muscle_groups")
  description           String?
  instructions          String?
  difficulty            String?
  equipment             String?

  // Relationships
  workouts WorkoutExercise[]

  @@map("exercises")
}

// Join table for workouts and exercises
model WorkoutExercise {
  id          String  @id @db.VarChar(10) // Changed to nanoid
  order       Int
  sets        Int
  reps        String
  weight      Float?
  restSeconds Int?    @map("rest_seconds")
  notes       String?

  // Relationships
  workoutId  String             @map("workout_id") @db.VarChar(10) // Changed to match Workout.id
  workout    Workout            @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId String             @map("exercise_id") @db.VarChar(10) // Changed to match Exercise.id
  exercise   Exercise           @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  logEntries ExerciseLogEntry[]

  @@unique([workoutId, exerciseId, order])
  @@map("workout_exercises")
}

// Workout log for tracking completed workouts
model WorkoutLog {
  id          String    @id @db.VarChar(10) // Changed to nanoid
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  duration    Int?
  notes       String?

  // Relationships
  userId    String             @map("user_id") @db.Uuid
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId String             @map("workout_id") @db.VarChar(10) // Changed to match Workout.id
  workout   Workout            @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercises ExerciseLogEntry[]

  @@map("workout_logs")
  @@index([userId, completedAt])
}

// Log entry for a specific exercise in a workout
model ExerciseLogEntry {
  id String @id @db.VarChar(10) // Changed to nanoid

  // Relationships
  workoutLogId      String          @map("workout_log_id") @db.VarChar(10) // Changed to match WorkoutLog.id
  workoutLog        WorkoutLog      @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
  workoutExerciseId String          @map("workout_exercise_id") @db.VarChar(10) // Changed to match WorkoutExercise.id
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  sets              ExerciseSet[]

  @@map("exercise_log_entries")
  @@index([workoutLogId])
}

// Individual set data
model ExerciseSet {
  id          String  @id @db.VarChar(10) // Changed to nanoid
  setNumber   Int     @map("set_number")
  reps        Int
  weight      Float?
  rpe         Int?
  isCompleted Boolean @default(true) @map("is_completed")

  // Relationships
  exerciseLogEntryId String           @map("exercise_log_entry_id") @db.VarChar(10) // Changed to match ExerciseLogEntry.id
  exerciseLogEntry   ExerciseLogEntry @relation(fields: [exerciseLogEntryId], references: [id], onDelete: Cascade)

  @@unique([exerciseLogEntryId, setNumber])
  @@index([weight])
  // Helps finding sets for a specific log entry (often useful)
  @@index([exerciseLogEntryId])
  @@map("exercise_sets")
}
